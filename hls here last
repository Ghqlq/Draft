
//
// Created by Ghala Buarish on 7/17/25.
//

#include "CSR_baseline.h"
#include <hls_stream.h>
#include <ap_axi_sdata.h>

/*
void spmv(int rowPtr[NUM_ROWS+1], int columnIndex[NNZ],
DTYPE values[NNZ], DTYPE y[SIZE], DTYPE x[SIZE])
{
	L1: for (int i = 0; i < NUM_ROWS; i++) {
#pragma HLS PIPELINE off
		DTYPE y0 = 0;
		L2: for (int k = rowPtr[i]; k < rowPtr[i+1]; k++) {
#pragma HLS PIPELINE off

			y0 += values[k] * x[columnIndex[k]];

		}
		y[i] = y0;
	}
}
*/
void spmv(hls::stream<DTYPE> &in_fifo, hls::stream<DTYPE> &out_fifo) {
	#pragma HLS INTERFACE axis port = in_fifo
	#pragma HLS INTERFACE axis port = in_fifo
	#pragma HLS INTERFACE axis port = return

	/*
	DTYPE data_in[TOTAL];

	for (int i=0; i <TOTAL;i++){
		data_in[i]=(float)input.read();
	}
	*/

	int rowPtr[NUM_ROWS +1];
	int columnIndex[NNZ];
	DTYPE values[NNZ];
	DTYPE x[SIZE];

	int currIndex = 0;

	spmv_label0:for (int i=0; i<NUM_ROWS+1; i++) {
#pragma HLS PIPELINE off
		rowPtr[i] = (int)in_fifo.read();
	}
	spmv_label1:for (int i = 0; i < NNZ; i++){
#pragma HLS PIPELINE off
		columnIndex[i] = (int)in_fifo.read();
	}
	spmv_label2:for (int i = 0; i < NNZ; i++) {
#pragma HLS PIPELINE off
		values[i] = in_fifo.read();
	}
	spmv_label3:for (int i = 0; i < SIZE; i++) {
#pragma HLS PIPELINE off
		x[i] = in_fifo.read();
	}

	L1: for (int i = 0; i < NUM_ROWS; i++) {
#pragma HLS PIPELINE off
		DTYPE y0 = 0;
		L2: for (int k = rowPtr[i]; k < rowPtr[i+1]; k++) {
#pragma HLS PIPELINE off

			y0 += values[k] * x[columnIndex[k]];
		}
		out_fifo.write(y0);
	}
}
