-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spmv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rowPtr_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    rowPtr_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    rowPtr_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    rowPtr_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    rowPtr_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    columnIndex_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    columnIndex_ce0 : OUT STD_LOGIC;
    columnIndex_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    values_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    values_ce0 : OUT STD_LOGIC;
    values_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    y_ce0 : OUT STD_LOGIC;
    y_we0 : OUT STD_LOGIC;
    y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of spmv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "spmv_spmv,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sfvc784-1-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.185000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2598,HLS_SYN_LUT=2896,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_reg_423 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_fu_193_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln10_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_204_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_149_ap_return : STD_LOGIC_VECTOR (2 downto 0);
    signal targetBlock_reg_441 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_17_fu_279_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_17_reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal empty_18_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_18_reg_457 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_reg_462 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_22_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_22_reg_467 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_spmv_Pipeline_L2_fu_149_ap_start : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_149_ap_done : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_149_ap_idle : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_149_ap_ready : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_149_values_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_spmv_Pipeline_L2_fu_149_values_ce0 : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_149_columnIndex_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_spmv_Pipeline_L2_fu_149_columnIndex_ce0 : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_149_x_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_spmv_Pipeline_L2_fu_149_x_ce0 : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_149_y0_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_149_y0_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_149_y0_7_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_149_y0_7_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_149_y0_6_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_149_y0_6_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_149_y0_5_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_149_y0_5_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_149_y0_4_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_149_y0_4_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_149_y0_3_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_149_y0_3_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_149_y0_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_149_y0_2_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_149_y0_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_149_y0_1_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_149_ap_start_reg : STD_LOGIC := '0';
    signal y0_loc_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_7_loc_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_6_loc_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_5_loc_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_4_loc_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_3_loc_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_2_loc_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_1_loc_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln10_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_fu_70 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvars_iv_next13_fu_183_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln12_fu_189_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_10_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_12_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_11_fu_240_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_14_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_13_fu_253_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_16_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_15_fu_266_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_19_fu_315_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_21_fu_321_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_0_lcssa_ph_fu_328_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component spmv_spmv_Pipeline_L2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln12 : IN STD_LOGIC_VECTOR (31 downto 0);
        sext_ln12_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        values_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        values_ce0 : OUT STD_LOGIC;
        values_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        columnIndex_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        columnIndex_ce0 : OUT STD_LOGIC;
        columnIndex_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y0_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y0_out_ap_vld : OUT STD_LOGIC;
        y0_7_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y0_7_out_ap_vld : OUT STD_LOGIC;
        y0_6_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y0_6_out_ap_vld : OUT STD_LOGIC;
        y0_5_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y0_5_out_ap_vld : OUT STD_LOGIC;
        y0_4_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y0_4_out_ap_vld : OUT STD_LOGIC;
        y0_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y0_3_out_ap_vld : OUT STD_LOGIC;
        y0_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y0_2_out_ap_vld : OUT STD_LOGIC;
        y0_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y0_1_out_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component spmv_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_spmv_Pipeline_L2_fu_149 : component spmv_spmv_Pipeline_L2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_spmv_Pipeline_L2_fu_149_ap_start,
        ap_done => grp_spmv_Pipeline_L2_fu_149_ap_done,
        ap_idle => grp_spmv_Pipeline_L2_fu_149_ap_idle,
        ap_ready => grp_spmv_Pipeline_L2_fu_149_ap_ready,
        sext_ln12 => k_reg_431,
        sext_ln12_1 => tmp_reg_436,
        values_address0 => grp_spmv_Pipeline_L2_fu_149_values_address0,
        values_ce0 => grp_spmv_Pipeline_L2_fu_149_values_ce0,
        values_q0 => values_q0,
        columnIndex_address0 => grp_spmv_Pipeline_L2_fu_149_columnIndex_address0,
        columnIndex_ce0 => grp_spmv_Pipeline_L2_fu_149_columnIndex_ce0,
        columnIndex_q0 => columnIndex_q0,
        x_address0 => grp_spmv_Pipeline_L2_fu_149_x_address0,
        x_ce0 => grp_spmv_Pipeline_L2_fu_149_x_ce0,
        x_q0 => x_q0,
        y0_out => grp_spmv_Pipeline_L2_fu_149_y0_out,
        y0_out_ap_vld => grp_spmv_Pipeline_L2_fu_149_y0_out_ap_vld,
        y0_7_out => grp_spmv_Pipeline_L2_fu_149_y0_7_out,
        y0_7_out_ap_vld => grp_spmv_Pipeline_L2_fu_149_y0_7_out_ap_vld,
        y0_6_out => grp_spmv_Pipeline_L2_fu_149_y0_6_out,
        y0_6_out_ap_vld => grp_spmv_Pipeline_L2_fu_149_y0_6_out_ap_vld,
        y0_5_out => grp_spmv_Pipeline_L2_fu_149_y0_5_out,
        y0_5_out_ap_vld => grp_spmv_Pipeline_L2_fu_149_y0_5_out_ap_vld,
        y0_4_out => grp_spmv_Pipeline_L2_fu_149_y0_4_out,
        y0_4_out_ap_vld => grp_spmv_Pipeline_L2_fu_149_y0_4_out_ap_vld,
        y0_3_out => grp_spmv_Pipeline_L2_fu_149_y0_3_out,
        y0_3_out_ap_vld => grp_spmv_Pipeline_L2_fu_149_y0_3_out_ap_vld,
        y0_2_out => grp_spmv_Pipeline_L2_fu_149_y0_2_out,
        y0_2_out_ap_vld => grp_spmv_Pipeline_L2_fu_149_y0_2_out_ap_vld,
        y0_1_out => grp_spmv_Pipeline_L2_fu_149_y0_1_out,
        y0_1_out_ap_vld => grp_spmv_Pipeline_L2_fu_149_y0_1_out_ap_vld,
        ap_return => grp_spmv_Pipeline_L2_fu_149_ap_return);

    mux_42_32_1_1_U18 : component spmv_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => rowPtr_0,
        din1 => rowPtr_1,
        din2 => rowPtr_2,
        din3 => rowPtr_3,
        din4 => trunc_ln12_fu_189_p1,
        dout => k_fu_193_p6);

    mux_42_32_1_1_U19 : component spmv_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => rowPtr_1,
        din1 => rowPtr_2,
        din2 => rowPtr_3,
        din3 => rowPtr_4,
        din4 => trunc_ln12_fu_189_p1,
        dout => tmp_fu_204_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_spmv_Pipeline_L2_fu_149_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_spmv_Pipeline_L2_fu_149_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln10_fu_177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_spmv_Pipeline_L2_fu_149_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_spmv_Pipeline_L2_fu_149_ap_ready = ap_const_logic_1)) then 
                    grp_spmv_Pipeline_L2_fu_149_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_70 <= ap_const_lv3_0;
            elsif (((icmp_ln10_fu_177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_70 <= indvars_iv_next13_fu_183_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                empty_17_reg_452 <= empty_17_fu_279_p3;
                empty_18_reg_457 <= empty_18_fu_287_p2;
                empty_20_reg_462 <= empty_20_fu_292_p2;
                empty_22_reg_467 <= empty_22_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_423 <= i_fu_70;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                k_reg_431 <= k_fu_193_p6;
                tmp_reg_436 <= tmp_fu_204_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                targetBlock_reg_441 <= grp_spmv_Pipeline_L2_fu_149_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_spmv_Pipeline_L2_fu_149_y0_1_out_ap_vld = ap_const_logic_1))) then
                y0_1_loc_fu_74 <= grp_spmv_Pipeline_L2_fu_149_y0_1_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_spmv_Pipeline_L2_fu_149_y0_2_out_ap_vld = ap_const_logic_1))) then
                y0_2_loc_fu_78 <= grp_spmv_Pipeline_L2_fu_149_y0_2_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_spmv_Pipeline_L2_fu_149_y0_3_out_ap_vld = ap_const_logic_1))) then
                y0_3_loc_fu_82 <= grp_spmv_Pipeline_L2_fu_149_y0_3_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_spmv_Pipeline_L2_fu_149_y0_4_out_ap_vld = ap_const_logic_1))) then
                y0_4_loc_fu_86 <= grp_spmv_Pipeline_L2_fu_149_y0_4_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_spmv_Pipeline_L2_fu_149_y0_5_out_ap_vld = ap_const_logic_1))) then
                y0_5_loc_fu_90 <= grp_spmv_Pipeline_L2_fu_149_y0_5_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_spmv_Pipeline_L2_fu_149_y0_6_out_ap_vld = ap_const_logic_1))) then
                y0_6_loc_fu_94 <= grp_spmv_Pipeline_L2_fu_149_y0_6_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_spmv_Pipeline_L2_fu_149_y0_7_out_ap_vld = ap_const_logic_1))) then
                y0_7_loc_fu_98 <= grp_spmv_Pipeline_L2_fu_149_y0_7_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_spmv_Pipeline_L2_fu_149_y0_out_ap_vld = ap_const_logic_1))) then
                y0_loc_fu_102 <= grp_spmv_Pipeline_L2_fu_149_y0_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_177_p2, ap_CS_fsm_state3, grp_spmv_Pipeline_L2_fu_149_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_spmv_Pipeline_L2_fu_149_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_spmv_Pipeline_L2_fu_149_ap_done)
    begin
        if ((grp_spmv_Pipeline_L2_fu_149_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_177_p2)
    begin
        if (((icmp_ln10_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_177_p2)
    begin
        if (((icmp_ln10_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    columnIndex_address0 <= grp_spmv_Pipeline_L2_fu_149_columnIndex_address0;
    columnIndex_ce0 <= grp_spmv_Pipeline_L2_fu_149_columnIndex_ce0;
    empty_10_fu_235_p2 <= "1" when (targetBlock_reg_441 = ap_const_lv3_0) else "0";
    empty_11_fu_240_p3 <= 
        y0_loc_fu_102 when (empty_10_fu_235_p2(0) = '1') else 
        y0_1_loc_fu_74;
    empty_12_fu_248_p2 <= "1" when (targetBlock_reg_441 = ap_const_lv3_1) else "0";
    empty_13_fu_253_p3 <= 
        y0_7_loc_fu_98 when (empty_12_fu_248_p2(0) = '1') else 
        empty_11_fu_240_p3;
    empty_14_fu_261_p2 <= "1" when (targetBlock_reg_441 = ap_const_lv3_2) else "0";
    empty_15_fu_266_p3 <= 
        y0_6_loc_fu_94 when (empty_14_fu_261_p2(0) = '1') else 
        empty_13_fu_253_p3;
    empty_16_fu_274_p2 <= "1" when (targetBlock_reg_441 = ap_const_lv3_3) else "0";
    empty_17_fu_279_p3 <= 
        y0_5_loc_fu_90 when (empty_16_fu_274_p2(0) = '1') else 
        empty_15_fu_266_p3;
    empty_18_fu_287_p2 <= "1" when (targetBlock_reg_441 = ap_const_lv3_4) else "0";
    empty_19_fu_315_p3 <= 
        y0_4_loc_fu_86 when (empty_18_reg_457(0) = '1') else 
        empty_17_reg_452;
    empty_20_fu_292_p2 <= "1" when (targetBlock_reg_441 = ap_const_lv3_5) else "0";
    empty_21_fu_321_p3 <= 
        y0_3_loc_fu_82 when (empty_20_reg_462(0) = '1') else 
        empty_19_fu_315_p3;
    empty_22_fu_297_p2 <= "1" when (targetBlock_reg_441 = ap_const_lv3_6) else "0";
    grp_spmv_Pipeline_L2_fu_149_ap_start <= grp_spmv_Pipeline_L2_fu_149_ap_start_reg;
    icmp_ln10_fu_177_p2 <= "1" when (i_fu_70 = ap_const_lv3_4) else "0";
    indvars_iv_next13_fu_183_p2 <= std_logic_vector(unsigned(i_fu_70) + unsigned(ap_const_lv3_1));
    trunc_ln12_fu_189_p1 <= i_fu_70(2 - 1 downto 0);
    values_address0 <= grp_spmv_Pipeline_L2_fu_149_values_address0;
    values_ce0 <= grp_spmv_Pipeline_L2_fu_149_values_ce0;
    x_address0 <= grp_spmv_Pipeline_L2_fu_149_x_address0;
    x_ce0 <= grp_spmv_Pipeline_L2_fu_149_x_ce0;
    y0_0_lcssa_ph_fu_328_p3 <= 
        y0_2_loc_fu_78 when (empty_22_reg_467(0) = '1') else 
        empty_21_fu_321_p3;
    y_address0 <= zext_ln10_fu_302_p1(2 - 1 downto 0);

    y_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_ce0 <= ap_const_logic_1;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_d0 <= y0_0_lcssa_ph_fu_328_p3;

    y_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_we0 <= ap_const_logic_1;
        else 
            y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln10_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_423),64));
end behav;
