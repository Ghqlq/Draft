//
// Created by Ghala Buarish on 7/17/25.
//

#include "CSR_baseline.h"
#include <hls_stream.h>
#include <ap_axi_sdata.h>

/*
void spmv(int rowPtr[NUM_ROWS+1], int columnIndex[NNZ],
DTYPE values[NNZ], DTYPE y[SIZE], DTYPE x[SIZE])
{
	L1: for (int i = 0; i < NUM_ROWS; i++) {
#pragma HLS PIPELINE off
		DTYPE y0 = 0;
		L2: for (int k = rowPtr[i]; k < rowPtr[i+1]; k++) {
#pragma HLS PIPELINE off

			y0 += values[k] * x[columnIndex[k]];

		}
		y[i] = y0;
	}
}
*/
void spmv(hls::stream<AXI_VALUE_IN> &input, hls::stream<AXI_VALUE_OUT> &y) {
	DTYPE data_in[TOTAL];

	for (int i=0; i <TOTAL;i++){
		data_in[i]=(float)input.read();
	}

	int rowPtr[NUM_ROWS +1];
	int columnIndex[NNZ];
	DTYPE values[NNZ];
	DTYPE x[SIZE];

	int currIndex = 0;

	for (int i=0; i<NUM_ROWS+1; i++) {
		rowPtr[i] = (int)data_in[currIndex];
		currIndex++;
	};
	for (int i = 0; i < NNZ; i++){
		columnIndex[i] = (int)data_in[currIndex];
		currIndex++;
	}
	for (int i = 0; i < NNZ; i++) {
		values[i] = data_in[currIndex];
		currIndex++;
	}
	for (int i = 0; i < SIZE; i++) {
		x[i] = data_in[currIndex];
		currIndex++;
	}
	L1: for (int i = 0; i < NUM_ROWS; i++) {
#pragma HLS PIPELINE off
		DTYPE y0 = 0;
		L2: for (int k = rowPtr[i]; k < rowPtr[i+1]; k++) {
#pragma HLS PIPELINE off

			y0 += values[k] * x[columnIndex[k]];
		}
		y.write((int)y0);
	}
}



//
// Created by Ghala Buarish on 7/17/25.
//

#ifndef CSR_BASELINE_H
#define CSR_BASELINE_H

#include <hls_stream.h>
#include <ap_axi_sdata.h>

const static int SIZE = 4;       // Size of square matrix (4x4)
const static int NNZ = 9;        // Number of non-zero elements
const static int NUM_ROWS = 4;   // Number of rows (same as SIZE)
const static int TOTAL = NUM_ROWS+1 + NNZ + NNZ + SIZE;

typedef float DTYPE;
typedef ap_axis<32,2,5,6> AXI_VALUE_IN;
typedef ap_axis<32,2,5,6> AXI_VALUE_OUT;


// void spmv(int rowPtr[NUM_ROWS+1], int columnIndex[NNZ],
// 		  DTYPE values[NNZ], DTYPE y[SIZE], DTYPE x[SIZE]);


void spmv(hls::stream<AXI_VALUE_IN> &input, hls::stream<AXI_VALUE_OUT> &y);

#endif // CSR_BASELINE_H

//
// Created by Ghala Buarish on 7/17/25.
//
#include "CSR_baseline.h"
#include <stdio.h>
#include <fstream>
#include <iostream>


void matrixvector(DTYPE A[SIZE][SIZE], DTYPE * y, DTYPE * x)
{
	for (int i = 0; i < SIZE; i++) {
		DTYPE y0 = 0;
		for (int j = 0; j < SIZE; j++)
			y0 += A[i][j] * x[j];
		y[i] = y0;
	}
}

int main(){
	int fail = 0;
	DTYPE M[SIZE][SIZE] = {{3,4,0,0},{0,5,9,0},{2,0,3,1},{0,4,0,6}};
	DTYPE x[SIZE] = {1,2,3,4};
	DTYPE y_sw[SIZE];
	// DTYPE values[] = {3,4,5,9,2,3,1,4,6};
	// int columnIndex[] = {0,1,1,2,0,2,3,1,3};
	// int rowPtr[] = {0,2,4,7,9};
	hls::stream<AXI_VALUE_OUT> y;

	DTYPE input[TOTAL] = {0,2,4,7,9,0,1,1,2,0,2,3,1,3,3,4,5,9,2,3,1,4,6,1,2,3,4};
	hls::stream<AXI_VALUE_IN> inputdat;

	for(int g = 0; g<TOTAL;g++){

		AXI_VALUE_IN valG;

		valG.data = input[g];
		valG.keep = 1; valG.strb=1; valG.user=1; valG.id = 0; valG.dest=0;
		inputdat << valG;
	}


	spmv(inputdat, y);

	matrixvector(M, y_sw, x);


	//for(int i = 0; i < SIZE; i++){
	//	print(%d, y_sw[i]);
	//	print(y[i]);
	//}
//if(y_sw[i] != y[i].to_float())
	//		fail = 1;
	if(fail == 1)
		printf("FAILED\n");
	else
		printf("PASS\n");
	return fail;
}




-----------------------------------------------------------------
// === File: csr_spmv.cpp ===
#include <hls_stream.h>
#include "csr_spmv.h"

void csr_spmv(
    hls::stream<int>& in_fifo,
    hls::stream<int>& out_fifo
) {
#pragma HLS INTERFACE axis port=in_fifo
#pragma HLS INTERFACE axis port=out_fifo
#pragma HLS INTERFACE s_axilite port=return

    const int NUM_ROWS = 4;
    const int NNZ = 9;
    const int TOTAL = NUM_ROWS + 1 + NNZ + NNZ + NUM_ROWS;

    int rowPtr[NUM_ROWS + 1];
    int colIndex[NNZ];
    int values[NNZ];
    int x[NUM_ROWS];

#pragma HLS ARRAY_PARTITION variable=rowPtr complete dim=1
#pragma HLS ARRAY_PARTITION variable=colIndex complete dim=1
#pragma HLS ARRAY_PARTITION variable=values complete dim=1
#pragma HLS ARRAY_PARTITION variable=x complete dim=1

    // === UNPACK STREAM ===
    for (int i = 0; i < NUM_ROWS + 1; i++) {
#pragma HLS PIPELINE II=1
        rowPtr[i] = in_fifo.read();
    }
    for (int i = 0; i < NNZ; i++) {
#pragma HLS PIPELINE II=1
        colIndex[i] = in_fifo.read();
    }
    for (int i = 0; i < NNZ; i++) {
#pragma HLS PIPELINE II=1
        values[i] = in_fifo.read();
    }
    for (int i = 0; i < NUM_ROWS; i++) {
#pragma HLS PIPELINE II=1
        x[i] = in_fifo.read();
    }

    // === COMPUTE y = A*x ===
    for (int i = 0; i < NUM_ROWS; i++) {
        int y_val = 0;
        for (int j = rowPtr[i]; j < rowPtr[i+1]; j++) {
            y_val += values[j] * x[colIndex[j]];
        }
        out_fifo.write(y_val);
    }
}
-----------------------------------------------------------------

// === File: csr_spmv.cpp ===
#include <hls_stream.h>
#include "csr_spmv.h"

typedef float DTYPE;

void csr_spmv(
    hls::stream<DTYPE>& in_fifo,
    hls::stream<DTYPE>& out_fifo
) {
#pragma HLS INTERFACE axis port=in_fifo
#pragma HLS INTERFACE axis port=out_fifo
#pragma HLS INTERFACE s_axilite port=return

    const int NUM_ROWS = 4;
    const int NNZ = 9;
    const int TOTAL = NUM_ROWS + 1 + NNZ + NNZ + NUM_ROWS;

    int rowPtr[NUM_ROWS + 1];
    int colIndex[NNZ];
    DTYPE values[NNZ];
    DTYPE x[NUM_ROWS];

#pragma HLS ARRAY_PARTITION variable=rowPtr complete dim=1
#pragma HLS ARRAY_PARTITION variable=colIndex complete dim=1
#pragma HLS ARRAY_PARTITION variable=values complete dim=1
#pragma HLS ARRAY_PARTITION variable=x complete dim=1

    // === UNPACK STREAM ===
    for (int i = 0; i < NUM_ROWS + 1; i++) {
#pragma HLS PIPELINE II=1
        rowPtr[i] = (int)in_fifo.read();
    }
    for (int i = 0; i < NNZ; i++) {
#pragma HLS PIPELINE II=1
        colIndex[i] = (int)in_fifo.read();
    }
    for (int i = 0; i < NNZ; i++) {
#pragma HLS PIPELINE II=1
        values[i] = in_fifo.read();
    }
    for (int i = 0; i < NUM_ROWS; i++) {
#pragma HLS PIPELINE II=1
        x[i] = in_fifo.read();
    }

    // === COMPUTE y = A*x ===
    for (int i = 0; i < NUM_ROWS; i++) {
        DTYPE y_val = 0;
        for (int j = rowPtr[i]; j < rowPtr[i+1]; j++) {
            y_val += values[j] * x[colIndex[j]];
        }
        out_fifo.write(y_val);
    }
}



