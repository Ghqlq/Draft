//
// Created by Ghala Buarish on 7/17/25.
//

#include "CSR_baseline.h"
#include <hls_stream.h>
#include <ap_axi_sdata.h>

void spmv(hls::stream<DTYPE> &in_fifo, hls::stream<DTYPE> &out_fifo) {
	#pragma HLS INTERFACE axis port = in_fifo
	#pragma HLS INTERFACE axis port = out_fifo


	int rowPtr[NUM_ROWS +1];
	int columnIndex[NNZ];
	DTYPE values[NNZ];
	DTYPE x[SIZE];
	DTYPE y[SIZE];


	spmv_label0:for (int i=0; i<NUM_ROWS+1; i++) {
#pragma HLS PIPELINE off
		rowPtr[i] = (int)in_fifo.read();
	}
	spmv_label1:for (int i = 0; i < NNZ; i++){
#pragma HLS PIPELINE off
		columnIndex[i] = (int)in_fifo.read();
	}
	spmv_label2:for (int i = 0; i < NNZ; i++) {
#pragma HLS PIPELINE off
		values[i] = in_fifo.read();
	}
	spmv_label3:for (int i = 0; i < SIZE; i++) {
#pragma HLS PIPELINE off
		x[i] = in_fifo.read();
	}


	L1: for (int i = 0; i < NUM_ROWS; i++) {
#pragma HLS PIPELINE off
		DTYPE y0 = 0;
		L2: for (int k = rowPtr[i]; k < rowPtr[i+1]; k++) {
#pragma HLS PIPELINE off

			y0 += values[k] * x[columnIndex[k]];
		}
		out_fifo.write(y0);
	}
}




//
// Created by Ghala Buarish on 7/17/25.
//
#include "CSR_baseline.h"
#include <stdio.h>
#include <fstream>
#include <iostream>


void matrixvector(DTYPE A[SIZE][SIZE], DTYPE * y, DTYPE * x)
{
	for (int i = 0; i < SIZE; i++) {
		DTYPE y0 = 0;
		for (int j = 0; j < SIZE; j++)
			y0 += A[i][j] * x[j];
		y[i] = y0;
	}
}

int main(){
	int fail = 0;
	DTYPE M[SIZE][SIZE] = {{3,4,0,0},{0,5,9,0},{2,0,3,1},{0,4,0,6}};
	DTYPE x[SIZE] = {1,2,3,4};
	DTYPE y_sw[SIZE];
	// DTYPE values[] = {3,4,5,9,2,3,1,4,6};
	// int columnIndex[] = {0,1,1,2,0,2,3,1,3};
	// int rowPtr[] = {0,2,4,7,9};
	hls::stream<DTYPE> y;
	hls::stream<DTYPE> input;


	DTYPE inputData[TOTAL] = {0,2,4,7,9,0,1,1,2,0,2,3,1,3,3,4,5,9,2,3,1,4,6,1,2,3,4};
	for (int i=0; i<TOTAL; i++){
		input.write(inputData[i]);
	}


	spmv(input, y);

	matrixvector(M, y_sw, x);



	for(int i = 0; i < SIZE; i++){
		DTYPE y_val = y.read();
		std::cout << y_val << " ";
		if(y_sw[i] != y_val)
			fail = 1;

	}
	if(fail == 1)
		printf("FAILED\n");
	else

		printf("PASS\n");
	return fail;

}



//
// Created by Ghala Buarish on 7/17/25.
//

#ifndef CSR_BASELINE_H
#define CSR_BASELINE_H

#include <hls_stream.h>
#include <ap_axi_sdata.h>

const static int SIZE = 4;       // Size of square matrix (4x4)
const static int NNZ = 9;        // Number of non-zero elements
const static int NUM_ROWS = 4;   // Number of rows (same as SIZE)
const static int TOTAL = NUM_ROWS+1 + NNZ + NNZ + SIZE;

typedef int DTYPE;

// void spmv(int rowPtr[NUM_ROWS+1], int columnIndex[NNZ],
// 		  DTYPE values[NNZ], DTYPE y[SIZE], DTYPE x[SIZE]);

void spmv(hls::stream<DTYPE> &in_fifo, hls::stream<DTYPE> &out_fifo);

#endif // CSR_BASELINE_H

