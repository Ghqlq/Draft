// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="spmv_spmv,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sfvc784-1-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.185000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1167,HLS_SYN_LUT=865,HLS_VERSION=2022_2}" *)

module spmv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rowPtr_address0,
        rowPtr_ce0,
        rowPtr_q0,
        rowPtr_address1,
        rowPtr_ce1,
        rowPtr_q1,
        columnIndex_address0,
        columnIndex_ce0,
        columnIndex_q0,
        values_address0,
        values_ce0,
        values_q0,
        y_address0,
        y_ce0,
        y_we0,
        y_d0,
        x_address0,
        x_ce0,
        x_q0
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] rowPtr_address0;
output   rowPtr_ce0;
input  [31:0] rowPtr_q0;
output  [2:0] rowPtr_address1;
output   rowPtr_ce1;
input  [31:0] rowPtr_q1;
output  [3:0] columnIndex_address0;
output   columnIndex_ce0;
input  [31:0] columnIndex_q0;
output  [3:0] values_address0;
output   values_ce0;
input  [31:0] values_q0;
output  [1:0] y_address0;
output   y_ce0;
output   y_we0;
output  [31:0] y_d0;
output  [1:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rowPtr_ce0;
reg rowPtr_ce1;
reg columnIndex_ce0;
reg values_ce0;
reg y_ce0;
reg y_we0;
reg x_ce0;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] indvars_iv_next6_fu_189_p2;
reg   [2:0] indvars_iv_next6_reg_298;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln10_fu_195_p1;
reg   [63:0] zext_ln10_reg_303;
wire   [0:0] icmp_ln10_fu_183_p2;
wire  signed [63:0] sext_ln13_fu_237_p1;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln13_1_fu_241_p1;
reg  signed [63:0] sext_ln13_1_reg_323;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln13_fu_245_p2;
wire   [63:0] add_ln13_fu_260_p2;
reg   [63:0] add_ln13_reg_341;
reg   [31:0] values_load_reg_346;
wire    ap_CS_fsm_state5;
reg   [31:0] x_load_reg_356;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_171_p2;
reg   [31:0] mul_reg_371;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_166_p2;
wire    ap_CS_fsm_state27;
reg   [63:0] k_1_reg_145;
reg   [31:0] y0_reg_154;
wire   [63:0] p_cast_fu_232_p1;
wire   [63:0] zext_ln17_fu_254_p1;
wire   [63:0] zext_ln17_1_fu_270_p1;
wire    ap_CS_fsm_state28;
reg   [2:0] i_fu_64;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_171_p0;
wire   [31:0] grp_fu_171_p1;
wire   [1:0] trunc_ln13_fu_200_p1;
wire   [3:0] shl_ln_fu_204_p3;
wire   [4:0] zext_ln13_fu_212_p1;
wire   [4:0] empty_9_fu_216_p2;
wire   [2:0] tmp_1_fu_222_p4;
wire   [3:0] trunc_ln17_fu_250_p1;
reg   [27:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
end

spmv_fadd_32ns_32ns_32_13_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_13_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y0_reg_154),
    .din1(mul_reg_371),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

spmv_fmul_32ns_32ns_32_8_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_8_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_171_p0),
    .din1(grp_fu_171_p1),
    .ce(1'b1),
    .dout(grp_fu_171_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_64 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_245_p2 == 1'd0))) begin
        i_fu_64 <= indvars_iv_next6_reg_298;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_1_reg_145 <= sext_ln13_fu_237_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        k_1_reg_145 <= add_ln13_reg_341;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y0_reg_154 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        y0_reg_154 <= grp_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_245_p2 == 1'd1))) begin
        add_ln13_reg_341 <= add_ln13_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv_next6_reg_298 <= indvars_iv_next6_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        mul_reg_371 <= grp_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln13_1_reg_323 <= sext_ln13_1_fu_241_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        values_load_reg_346 <= values_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_load_reg_356 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln10_reg_303[2 : 0] <= zext_ln10_fu_195_p1[2 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln10_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        columnIndex_ce0 = 1'b1;
    end else begin
        columnIndex_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rowPtr_ce0 = 1'b1;
    end else begin
        rowPtr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rowPtr_ce1 = 1'b1;
    end else begin
        rowPtr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        values_ce0 = 1'b1;
    end else begin
        values_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        y_ce0 = 1'b1;
    end else begin
        y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        y_we0 = 1'b1;
    end else begin
        y_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_245_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_260_p2 = (k_1_reg_145 + 64'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign columnIndex_address0 = zext_ln17_fu_254_p1;

assign empty_9_fu_216_p2 = (zext_ln13_fu_212_p1 + 5'd4);

assign grp_fu_171_p0 = values_load_reg_346;

assign grp_fu_171_p1 = x_load_reg_356;

assign icmp_ln10_fu_183_p2 = ((i_fu_64 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_245_p2 = (($signed(k_1_reg_145) < $signed(sext_ln13_1_reg_323)) ? 1'b1 : 1'b0);

assign indvars_iv_next6_fu_189_p2 = (i_fu_64 + 3'd1);

assign p_cast_fu_232_p1 = tmp_1_fu_222_p4;

assign rowPtr_address0 = p_cast_fu_232_p1;

assign rowPtr_address1 = zext_ln10_fu_195_p1;

assign sext_ln13_1_fu_241_p1 = $signed(rowPtr_q0);

assign sext_ln13_fu_237_p1 = $signed(rowPtr_q1);

assign shl_ln_fu_204_p3 = {{trunc_ln13_fu_200_p1}, {2'd0}};

assign tmp_1_fu_222_p4 = {{empty_9_fu_216_p2[4:2]}};

assign trunc_ln13_fu_200_p1 = i_fu_64[1:0];

assign trunc_ln17_fu_250_p1 = k_1_reg_145[3:0];

assign values_address0 = zext_ln17_fu_254_p1;

assign x_address0 = zext_ln17_1_fu_270_p1;

assign y_address0 = zext_ln10_reg_303;

assign y_d0 = y0_reg_154;

assign zext_ln10_fu_195_p1 = i_fu_64;

assign zext_ln13_fu_212_p1 = shl_ln_fu_204_p3;

assign zext_ln17_1_fu_270_p1 = columnIndex_q0;

assign zext_ln17_fu_254_p1 = trunc_ln17_fu_250_p1;

always @ (posedge ap_clk) begin
    zext_ln10_reg_303[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //spmv
